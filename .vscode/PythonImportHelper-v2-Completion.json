[
    {
        "label": "*",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "xmltodict",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xmltodict",
        "description": "xmltodict",
        "detail": "xmltodict",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "firebase_admin",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "credentials",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "firestore",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "email.message",
        "description": "email.message",
        "isExtraImport": true,
        "detail": "email.message",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "ssl,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl.",
        "description": "ssl.",
        "detail": "ssl.",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver.common.action_chains",
        "description": "selenium.webdriver.common.action_chains",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.action_chains",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "FieldFilter",
        "importPath": "google.cloud.firestore_v1.base_query",
        "description": "google.cloud.firestore_v1.base_query",
        "isExtraImport": true,
        "detail": "google.cloud.firestore_v1.base_query",
        "documentation": {}
    },
    {
        "label": "Or",
        "importPath": "google.cloud.firestore_v1.base_query",
        "description": "google.cloud.firestore_v1.base_query",
        "isExtraImport": true,
        "detail": "google.cloud.firestore_v1.base_query",
        "documentation": {}
    },
    {
        "label": "FieldFilter",
        "importPath": "google.cloud.firestore_v1.base_query",
        "description": "google.cloud.firestore_v1.base_query",
        "isExtraImport": true,
        "detail": "google.cloud.firestore_v1.base_query",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "time,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time.",
        "description": "time.",
        "detail": "time.",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "unidecode",
        "importPath": "unidecode",
        "description": "unidecode",
        "isExtraImport": true,
        "detail": "unidecode",
        "documentation": {}
    },
    {
        "label": "UnexpectedAlertPresentException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "TimeoutException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "secrets,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets.",
        "description": "secrets.",
        "detail": "secrets.",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "threading,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading.",
        "description": "threading.",
        "detail": "threading.",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "UserAgent",
        "importPath": "fake_useragent",
        "description": "fake_useragent",
        "isExtraImport": true,
        "detail": "fake_useragent",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "HTTPBasicAuth",
        "importPath": "requests.auth",
        "description": "requests.auth",
        "isExtraImport": true,
        "detail": "requests.auth",
        "documentation": {}
    },
    {
        "label": "TwoCaptcha",
        "importPath": "twocaptcha",
        "description": "twocaptcha",
        "isExtraImport": true,
        "detail": "twocaptcha",
        "documentation": {}
    },
    {
        "label": "undetected_chromedriver",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "undetected_chromedriver",
        "description": "undetected_chromedriver",
        "detail": "undetected_chromedriver",
        "documentation": {}
    },
    {
        "label": "Proxy",
        "importPath": "selenium.webdriver.common.proxy",
        "description": "selenium.webdriver.common.proxy",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.proxy",
        "documentation": {}
    },
    {
        "label": "ProxyType",
        "importPath": "selenium.webdriver.common.proxy",
        "description": "selenium.webdriver.common.proxy",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.proxy",
        "documentation": {}
    },
    {
        "label": "math,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math.",
        "description": "math.",
        "detail": "math.",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "PrettyTable",
        "importPath": "prettytable",
        "description": "prettytable",
        "isExtraImport": true,
        "detail": "prettytable",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "urllib,random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.random",
        "description": "urllib.random",
        "detail": "urllib.random",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "urllib3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib3",
        "description": "urllib3",
        "detail": "urllib3",
        "documentation": {}
    },
    {
        "label": "aggregation",
        "importPath": "google.cloud.firestore_v1",
        "description": "google.cloud.firestore_v1",
        "isExtraImport": true,
        "detail": "google.cloud.firestore_v1",
        "documentation": {}
    },
    {
        "label": "Driver",
        "importPath": "seleniumbase",
        "description": "seleniumbase",
        "isExtraImport": true,
        "detail": "seleniumbase",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "consulta_saque_complementar_bmg",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def consulta_saque_complementar_bmg(retorno_login,dict_infos):\n    login = 'ROBO.56306'\n    senha = r'irWY!kQD@6%rb'\n    if dict_infos.get(\"id_consulta_massa\") and not dict_infos.get('leads_saque'):\n        print('aguardando consulta em massa BMG')\n        time.sleep(randint(10,30))\n    cartoes = []\n    #vem no dict\n    url = \"https://ws1.bmgconsig.com.br/webservices/SaqueComplementar?wsdl\"\n    cpf = dict_infos.get('cpf')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "login_api_bmg",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def login_api_bmg(usuario_id,nome_thread):\n    return {'driver':True,'senha_valida':True}\ndef digitacao_bmg_api(retorno_login,dict_infos):\n    dict_infos[\"cpf\"] = ''.join(re.findall(r'\\d+', dict_infos[\"cpf\"]))\n    dict_infos[\"cpf\"] = dict_infos[\"cpf\"].zfill(11)\n    simulacao = simular_saque_parcelado_bmg(retorno_login,dict_infos)\n    print(simulacao)\n    login = 'ROBO.56306'\n    senha = r'irWY!kQD@6%rb'\n    url = \"https://ws1.bmgconsig.com.br/webservices/SaqueComplementar?wsdl\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "digitacao_bmg_api",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def digitacao_bmg_api(retorno_login,dict_infos):\n    dict_infos[\"cpf\"] = ''.join(re.findall(r'\\d+', dict_infos[\"cpf\"]))\n    dict_infos[\"cpf\"] = dict_infos[\"cpf\"].zfill(11)\n    simulacao = simular_saque_parcelado_bmg(retorno_login,dict_infos)\n    print(simulacao)\n    login = 'ROBO.56306'\n    senha = r'irWY!kQD@6%rb'\n    url = \"https://ws1.bmgconsig.com.br/webservices/SaqueComplementar?wsdl\"\n    codigo_produto_seguro = 47 if dict_infos[\"codigo_entidade\"] == '4277' else 1\n    info_seguro = ''",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "simular_saque_parcelado_bmg",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def simular_saque_parcelado_bmg(retorno_login,dict_infos):\n    url = \"https://ws1.bmgconsig.com.br/webservices/SaqueComplementar?wsdl\"\n    login = 'ROBO.56306'\n    senha = r'irWY!kQD@6%rb'\n    soap = f'''\n<soapenv:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:web=\"http://webservice.econsig.bmg.com\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <web:buscarSimulacao soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n         <param xsi:type=\"web:SimulacaoCartaoParameter\">",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "dict_modalidade_saque",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "dict_modalidade_saque = {\n    'Parcelado':'2',\n}\ndef consulta_saque_complementar_bmg(retorno_login,dict_infos):\n    login = 'ROBO.56306'\n    senha = r'irWY!kQD@6%rb'\n    if dict_infos.get(\"id_consulta_massa\") and not dict_infos.get('leads_saque'):\n        print('aguardando consulta em massa BMG')\n        time.sleep(randint(10,30))\n    cartoes = []",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "dict_infos",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "dict_infos = {\n    \"cpf\": \"23358670244\",\n    \"matricula\": \"1319389080\",\n    \"numero_conta_interna\": 19112443,\n    \"codigo_entidade\" : 1581, # 1581 ou 4277\n    \"tipo_saque\": 2,    #   1-SaqueAutorizado    2-Parcelado \n    \"digito_agencia\" : \"0\",\n    \"agencia\" : \"1060\",\n    \"codigo_banco\" : 237,\n    \"codigo_banco_ordem_pagamento\" : 0, #Informar ‘0’ (zero)caso não seja OP.",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "retorno",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "retorno = digitacao_bmg_api(True,dict_infos)\nprint(retorno)\n# cpfs_df = pd.read_csv('cpfs.csv')\n# RETORNOS = {}\n# for index,row in cpfs_df.iterrows():\n#     cpf = row['CPF']\n#     cpf = \"\".join(re.findall(r\"\\d+\", cpf))\n#     cpf = cpf.zfill(11)\n#     dict_infos = {'cpf':cpf}\n#     retorno = consulta_saque_complementar_bmg(True,dict_infos)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "proxies",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def proxies(username, password, endpoint, port, nome):\n    manifest_json = \"\"\"\n    {\n        \"version\": \"1.0.0\",\n        \"manifest_version\": 2,\n        \"name\": \"Proxies\",\n        \"permissions\": [\n            \"proxy\",\n            \"tabs\",\n            \"unlimitedStorage\",",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "save_image_to_firestore",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def save_image_to_firestore(image_path, document_name):\n    # Open the image file\n    print(\"salvando imagem, \", image_path, document_name)\n    with open(image_path, \"rb\") as image_file:\n        # Read the image file\n        image_data = image_file.read()\n        # Encode image data to base64\n        encoded_image = base64.b64encode(image_data).decode(\"utf-8\")\n        # Prepare data to be saved in Firestore\n        image_metadata = {",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "get_chrome_profile_path",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def get_chrome_profile_path(profile_name):\n    # Definir o caminho base para os perfis do Chrome\n    if os.name == 'nt':  # Windows\n        base_path = os.path.join(os.getenv('LOCALAPPDATA'), 'Google', 'Chrome', 'User Data')\n    elif os.name == 'posix':  # Mac ou Linux\n        base_path = os.path.join(os.getenv('HOME'), '.config', 'google-chrome')\n    else:\n        raise Exception(\"Sistema operacional não suportado\")\n    return os.path.join(base_path, profile_name)\ndef check_profile_exists(usuario_id):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "check_profile_exists",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def check_profile_exists(usuario_id):\n    if os.name == 'nt':  # Windows\n        caminho_base = os.path.join(os.getenv('LOCALAPPDATA'), 'Google', 'Chrome', 'User Data')\n    else:  # Linux\n        caminho_base = os.path.expanduser('~/.config/google-chrome')\n    # Define o caminho completo do perfil específico do usuário\n    caminho_perfil = os.path.join(caminho_base, usuario_id)\n    # Verifica se o perfil já existe, se não, ele será criado ao iniciar o driver\n    if not os.path.exists(caminho_perfil):\n        print(f\"Perfil '{usuario_id}' não encontrado. Criando um novo...\")",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "kill_chrome_with_profile",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def kill_chrome_with_profile(profile_path):\n    \"\"\"Mata processos do Chrome que usam o caminho de perfil especificado.\"\"\"\n    try:\n        # Itera sobre todos os processos em execução\n        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):\n            if proc.info['name'] == 'chrome.exe':\n                # Verifica se o caminho do perfil está na linha de comando do processo\n                if any(profile_path in arg for arg in proc.info['cmdline']):\n                    pid = proc.info['pid']\n                    print(f\"Matando processo com PID: {pid}\")",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "iniciar_driver",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def iniciar_driver(profile='', is_mobile=False, uc=True,headless=True,use_proxy=True):\n    # Define o caminho base do perfil do Chrome\n    caminho_perfil = False\n    for n in range(3):\n        try:\n            user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36\"\n            print(user_agent)\n            options = {\n                \"uc\": uc,\n                \"headless\": headless,",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "create_new_chrome_browser",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def create_new_chrome_browser(use_proxy=True, headless=True, profile=False):\n    use_proxy = False\n    options = Options()\n    if profile:\n        profile_path = get_chrome_profile_path(profile)\n        print(f\"Acessando Chrome pelo path '{profile_path}'\")\n        options.add_argument(f\"--user-data-dir={profile_path}\")\n    if headless:\n        options.add_argument(\"--headless=new\")\n    ua = UserAgent(os=\"windows\", min_percentage=randint(1, 50))",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "create_new_chrome_browser_uc",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def create_new_chrome_browser_uc(use_proxy=False, user_agent=False, headless=False,profile=False):\n    try:\n        options = uc.ChromeOptions()\n        print(f'Criando Driver, {use_proxy}, {user_agent}, {headless}, {profile}')\n        if use_proxy:\n            proxy_selected = choice(proxy_list)\n            options.add_argument(\n                f'--proxy-server={proxy_selected}'\n            )\n            # options.add_extension(proxy_selected[\"name_proxy\"])",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "hash_value",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def hash_value(api_key):\n    return hashlib.sha256(api_key.encode()).hexdigest()\nbancos_api_storm = {\"inbursa\": 152}\ntipos_operacao_storm = {\n    \"margem livre\": 1,\n    \"refinanciamento\": 2,\n    \"cartao sem saque\": 5,\n    \"margem_livre_mais_refinanciamento\": 6,\n    \"cartao_com_saque\": 8,\n    \"refinanciamento_rec\": 10,",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "captcha_solver",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def captcha_solver(file_address):\n    try:\n        solver = TwoCaptcha(\"08577d94e9e2272e61226ad7f039e3b0\")\n        id = solver.normal(file=file_address)\n        print(id)\n        return id.get(\"code\", \"0000\")\n    except:\n        tb = traceback.format_exc()\n        return \"0000\"\ndef format_date(date):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "format_date",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def format_date(date):\n    try:\n        date_format = date.strftime(\"%d/%m/%Y\")\n    except:\n        try:\n            date_format = datetime.strptime(date, \"%Y-%m-%dT%H:%M:%S.%fZ\").strftime(\n                \"%d/%m/%Y\"\n            )\n        except:\n            date_format = \"\"",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "format_hour",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def format_hour(date):\n    date = date - timedelta(hours=3)\n    date_format = date.strftime(\"%H:%M\")\n    return date_format\ndef format_valor(valor):\n    try:\n        valor = str(valor).replace(\",\",'_').replace(\".\", \",\").replace(\"_\", \".\")\n        valor = \"R$ {:_.2f}\".format(valor)\n        return valor\n    except:",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "format_valor",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def format_valor(valor):\n    try:\n        valor = str(valor).replace(\",\",'_').replace(\".\", \",\").replace(\"_\", \".\")\n        valor = \"R$ {:_.2f}\".format(valor)\n        return valor\n    except:\n        return f\"R$ {valor}\"\ndef format_date_dd_mm_yyyy_to_yyyy_mm_dd(date_string):\n    date_object = datetime.strptime(date_string, \"%d/%m/%Y\")\n    # Convert the date object to the desired format",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "format_date_dd_mm_yyyy_to_yyyy_mm_dd",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def format_date_dd_mm_yyyy_to_yyyy_mm_dd(date_string):\n    date_object = datetime.strptime(date_string, \"%d/%m/%Y\")\n    # Convert the date object to the desired format\n    formatted_date = date_object.strftime(\"%Y-%m-%d\")\n    return formatted_date\ndef select_element_value(driver, id, value):\n    select_element = WebDriverWait(driver, 8).until(\n        EC.element_to_be_clickable((By.ID, id))\n    )\n    select = Select(select_element)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "select_element_value",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def select_element_value(driver, id, value):\n    select_element = WebDriverWait(driver, 8).until(\n        EC.element_to_be_clickable((By.ID, id))\n    )\n    select = Select(select_element)\n    for n in range(10):\n        try:\n            select.select_by_value(value)\n            break\n        except:",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "fix_valor",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def fix_valor(valor):\n    if not valor:\n        return 0\n    try:\n        return float(valor)\n    except:\n        pass\n    valor = str(valor).strip()\n    is_negative = \"-\" in valor\n    valor = valor.replace(\"a.m\", \"\").replace(\" .\", \"\")",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "calcular_saldo_devedor",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def calcular_saldo_devedor(n, p, q0, j):\n    saldo_devedor = q0 * (1 + j) ** n - p * (((1 + j) ** n - 1) / j)\n    return saldo_devedor\ndef calcular_valor_emprestimo_inicial(n, p, j):\n    q0 = 0  # Valor inicial do empréstimo\n    while True:\n        q_atual = p * ((1 - (1 + j) ** -n) / j)\n        if abs(q_atual - q0) < 0.01:  # Margem de erro\n            break\n        q0 += 0.01",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "calcular_valor_emprestimo_inicial",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def calcular_valor_emprestimo_inicial(n, p, j):\n    q0 = 0  # Valor inicial do empréstimo\n    while True:\n        q_atual = p * ((1 - (1 + j) ** -n) / j)\n        if abs(q_atual - q0) < 0.01:  # Margem de erro\n            break\n        q0 += 0.01\n    return q0\ndef alert_desenvolvimento(message):\n    try:",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "alert_desenvolvimento",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def alert_desenvolvimento(message):\n    try:\n        msg = EmailMessage()\n        msg.set_content(message)\n        msg[\"Subject\"] = f\"Alerta ConsigBot\"\n        msg[\"From\"] = \"desenvolvimento@lispromotora.com\"\n        msg[\"To\"] = \"desenvolvimento@lispromotora.com\"\n        password = \"ntxzvsvxnyyayeky\"  # minha senha de app\n        sender = \"desenvolvimento@lispromotora.com\"  # meu email\n        enviado = send_email(msg, sender, password)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def send_email(msg, sender, password):\n    try:\n        ctx = ssl.create_default_context()\n        with smtplib.SMTP_SSL(\"smtp.gmail.com\", port=465, context=ctx) as server:\n            server.login(sender, password)\n            server.send_message(msg)\n        return True\n    except Exception as e:\n        return False\ndef verifica_header_df(df, headers):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "verifica_header_df",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def verifica_header_df(df, headers):\n    for header in headers:\n        if header not in df.columns:\n            return False\n    return True\ndef set_usuario_banco_invalid(usuario_banco):\n    db.collection(\"usuarios_banco\").document(usuario_banco).update(\n        {\"status\": \"Senha Inválida\", \"active\": False}\n    )\ndef captcha_solver_google(googlekey, site, version, invisible, enterprise=0):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "set_usuario_banco_invalid",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def set_usuario_banco_invalid(usuario_banco):\n    db.collection(\"usuarios_banco\").document(usuario_banco).update(\n        {\"status\": \"Senha Inválida\", \"active\": False}\n    )\ndef captcha_solver_google(googlekey, site, version, invisible, enterprise=0):\n    api_key = \"08577d94e9e2272e61226ad7f039e3b0\"\n    method = \"userrecaptcha\"\n    # enterprise = 0 or 1\n    callback = requests.post(\n        f\"http://2captcha.com/in.php?key={api_key}&method={method}&googlekey={googlekey}&pageurl={site}&version={version}&invisible={invisible}&enterprise={enterprise}\"",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "captcha_solver_google",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def captcha_solver_google(googlekey, site, version, invisible, enterprise=0):\n    api_key = \"08577d94e9e2272e61226ad7f039e3b0\"\n    method = \"userrecaptcha\"\n    # enterprise = 0 or 1\n    callback = requests.post(\n        f\"http://2captcha.com/in.php?key={api_key}&method={method}&googlekey={googlekey}&pageurl={site}&version={version}&invisible={invisible}&enterprise={enterprise}\"\n    )\n    try:\n        id = callback.text.split(\"|\")[1]\n    except:",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "captcha_solver_cloudfare",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def captcha_solver_cloudfare(siteKey_target, url_target):\n    api_key = \"08577d94e9e2272e61226ad7f039e3b0\"\n    solver = TwoCaptcha(api_key)\n    try:\n        print(\"resolvendo captcha\")\n        result = solver.turnstile(\n            sitekey= siteKey_target,\n            url= url_target,\n        )\n    except Exception as e:",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "update_counter",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def update_counter(last_datetime, last_value):\n    date_now = datetime.now().date()\n    if last_datetime != date_now:\n        return 0\n    return last_value + 1\ndef alert_massa_finalizou(consulta_dict):\n    banco = consulta_dict.get(\"banco\")\n    user = consulta_dict.get(\"user\")\n    email = db.collection(\"users\").document(user).get().to_dict()[\"email\"]\n    msg = EmailMessage()",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "alert_massa_finalizou",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def alert_massa_finalizou(consulta_dict):\n    banco = consulta_dict.get(\"banco\")\n    user = consulta_dict.get(\"user\")\n    email = db.collection(\"users\").document(user).get().to_dict()[\"email\"]\n    msg = EmailMessage()\n    msg.set_content(\n        f\"\"\"\nOlá!\\n\nO seu arquivo de consulta em massa no banco {str(banco).title()} finalizou, acesse o consigbot para conferir\\n\nhttps://consigbot.com\\n\\nBoas vendas!\\nEquipe Consigbot",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "create_higienizacao_ref",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def create_higienizacao_ref(banco, status, tipo):\n    higienizacao_ref = (\n        db.collection(\"higienizacao\")\n        .where(filter=FieldFilter(\"banco\", \"==\", banco))\n        .where(filter=FieldFilter(\"status\", \"==\", status))\n    )\n    if tipo:\n        higienizacao_ref = higienizacao_ref.where(\n            filter=FieldFilter(\"tipo\", \"==\", tipo)\n        )",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "create_robo",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def create_robo(threads_ativos, doc_usuario_banco, usuario_banco, tipo, first_doc):\n    dia = datetime.now().day\n    for n in range(1, 10000):\n        if str(n) in threads_ativos.keys():\n            continue\n        print(\n            \"criando novo robo \",\n            n,\n        )\n        if doc_usuario_banco:",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "set_to_updating",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def set_to_updating(doc):\n    if doc.to_dict().get(\"status\") == \"pendente\":\n        doc.reference.update({\"status\": \"atualizando\"})\ndef restart_counts(data_robo, banco):\n    dia = datetime.now().day\n    data_robo.update(\n        {\n            f\"quant_consultas_fgts.{str(dia)}\": 0,\n            f\"quant_consultas.{str(dia)}\": 0,\n            f\"quant_consultas_fgts.{str(dia+1)}\": 0,",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "restart_counts",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def restart_counts(data_robo, banco):\n    dia = datetime.now().day\n    data_robo.update(\n        {\n            f\"quant_consultas_fgts.{str(dia)}\": 0,\n            f\"quant_consultas.{str(dia)}\": 0,\n            f\"quant_consultas_fgts.{str(dia+1)}\": 0,\n            f\"quant_consultas.{str(dia+1)}\": 0,\n        }\n    )",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "is_value_in_nested_dicts",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def is_value_in_nested_dicts(value, nested_dict):\n    for key, inner_dict in nested_dict.items():\n        if isinstance(inner_dict, dict):\n            for inner_key, inner_value in inner_dict.items():\n                if inner_value == value:\n                    return True\n    return False\ndef close_thread(threads_ativos, nome_thread, novo_status=\"\", retorno_login=False):\n    id_consulta_massa = threads_ativos.get(nome_thread, {}).get(\"id_consulta_massa\")\n    print(f\"closing thread {nome_thread}\")",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "close_thread",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def close_thread(threads_ativos, nome_thread, novo_status=\"\", retorno_login=False):\n    id_consulta_massa = threads_ativos.get(nome_thread, {}).get(\"id_consulta_massa\")\n    print(f\"closing thread {nome_thread}\")\n    try:\n        remove_user_from_robo(threads_ativos, nome_thread, retorno_login)\n    except:\n        pass\n    print(f\"thread {nome_thread} finalizada\")\n    if threads_ativos.get(nome_thread,{}).get('id_consulta_massa'):\n        print(f'tem id em massa, {id_consulta_massa}')",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "update_usuario_bad_login",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def update_usuario_bad_login(threads_ativos, nome_thread, retorno_login):\n    user_id = threads_ativos.get(nome_thread,{})[\"usuario_logado\"]\n    remove_user_from_robo(threads_ativos, nome_thread, retorno_login)\n    try:\n        retorno_login[\"driver\"].quit()\n    except:\n        pass\n    if retorno_login[\"senha_valida\"]:\n        return\n    db.collection(\"usuarios_banco\").document(user_id).update(",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "validateCPF",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def validateCPF(cpf):\n    try:\n        cpf_numerico = \"\".join(filter(str.isdigit, cpf))\n        # Verificar se tem 11 dígitos\n        while len(cpf_numerico) < 11:\n            cpf_numerico = \"0\" + cpf_numerico\n        print(cpf_numerico)\n        # Verificar se todos os dígitos são iguais\n        if cpf_numerico == cpf_numerico[0] * 11:\n            return False",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "save_to_firebase_cr",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def save_to_firebase_cr(dados,doc,cpf):\n    print(f'Salvando dados do CR para o CPF {cpf}')\n    # Verifica se existe um documento com o CPF do cliente\n    if not cpf:\n        return\n    if not dados.get(\"erro\", False):\n        print(f'sem erro')\n        if doc.exists:\n            print('doc existe')\n            telefones = doc.to_dict().get(\"telefones_list\")",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "update_clientes_from_robo",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def update_clientes_from_robo(retorno, doc_dict_hig):\n    #dict_verification contem a chave correspondente ao valor na base de dados para o valor correspondente ao retorno da consulta\n    cpf = doc_dict_hig[\"cpf\"]\n    data_source = 5 if doc_dict_hig.get(\"banco\") == \"consignado_rapido\" else 10\n    cpf = \"\".join(re.findall(r\"\\d+\", cpf))\n    cpf = cpf.zfill(11)\n    # precisa verificar se cliente existe na db.\n    doc = db.collection(\"clientes\").document(cpf).get()\n    d_cliente = retorno.get(\"dados\", {})\n    print('update robo, ',doc_dict_hig.get(\"banco\"))",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "conferencia_linhas_feitas",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def conferencia_linhas_feitas(threads_ativos,nome_thread):\n    try:\n        print('conferindo linhas feitas')\n        if not threads_ativos.get(nome_thread,{}).get('leads_fgts'):\n            return False\n        status = 'liberado'\n        doc_ref = db.collection('higienizacao').where('status','==',status).where('id_consulta_massa','==',threads_ativos[nome_thread].get('id_consulta_massa'))\n        aggregate_query = aggregation.AggregationQuery(doc_ref)\n        contagem = aggregate_query.count(alias=\"all\")\n        print(contagem)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "update_base_leads",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def update_base_leads(retorno,original_doc_dict):\n    try:\n        cpf = \"\".join(re.findall(r\"\\d+\", original_doc_dict.get('cpf')))\n        cpf = cpf.zfill(11)\n        if retorno.get('status') == 'na fila' or retorno.get('status') == 'aguardando na fila':\n            return\n        now = datetime.now(timezone.utc)\n        if now.day > 21:\n            next_month = now + timedelta(days=30)\n            proxima_virada_fgts = next_month.replace(day=21, hour=0, minute=0, second=0, microsecond=0)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "update_base_leads_saque",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def update_base_leads_saque(retorno,original_doc_dict):\n    try:\n        cpf = \"\".join(re.findall(r\"\\d+\", original_doc_dict.get('cpf')))\n        cpf = cpf.zfill(11)\n        if retorno.get('status') == 'na fila' or retorno.get('status') == 'aguardando na fila':\n            return\n        now = datetime.now(timezone.utc)\n        doc = db.collection('base_saque_complementar').document(cpf)\n        if retorno.get('sucesso'):\n            target_date = datetime.now(timezone.utc) + timedelta(days=180)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "update_base_leads_assessorare",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def update_base_leads_assessorare(retorno,original_doc_dict):\n    banco = original_doc_dict.get('banco')\n    try:\n        cpf = \"\".join(re.findall(r\"\\d+\", original_doc_dict.get('cpf')))\n        cpf = cpf.zfill(11)\n        if retorno.get('status') == 'consulta na fila' or retorno.get('status') == 'na fila':\n            return\n        now = datetime.now(timezone.utc)\n        if now.day > 21:\n            next_month = now + timedelta(days=30)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "try_convert",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def try_convert(value):\n    try:\n        return int(value)\n    except ValueError:\n        try:\n            return float(value)\n        except ValueError:\n            return value\ndef random_name():\n    nomes = [",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "random_name",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def random_name():\n    nomes = [\n    \"Ana Silva\",\n    \"Pedro Oliveira\",\n    \"Maria Santos\",\n    \"João Souza\",\n    \"Juliana Costa\",\n    \"Lucas Pereira\",\n    \"Carolina Almeida\",\n    \"Gabriel Fernandes\",",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "update_retorno_consulta",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def update_retorno_consulta(threads_ativos, nome_thread, retorno, doc, doc_dict):\n    print(f'update retorno consulta')\n    if retorno.get('tentar_novamente') and threads_ativos[nome_thread].get('tentativas',6) < 5:\n        print('tentando novamente')\n        return\n    # No momento, não considero múltiplas tentativas na contagem\n    dia = datetime.now().day\n    if retorno.get(\"status\") == \"na fila\" or retorno.get(\"status\") == \"aguardando na fila\":\n        retorno.update({\"status\": \"na fila\"})\n    liberado = \"liberado\" if retorno.get(\"sucesso\", False) else \"nao liberado\"",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "update_retorno_consulta_in100",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def update_retorno_consulta_in100(threads_ativos, nome_thread, retorno, doc):\n    # No momento, não considero múltiplas tentativas na contagem\n    dia = datetime.now().day\n    if \"erro\" in retorno:\n        liberado = (\"nao liberado\",)\n        obs = retorno[\"erro\"]\n        msg_retorno = retorno[\"erro\"]\n    else:\n        liberado = \"liberado\"\n        obs = \"Consulta efetuada\"",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "quit_driver",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def quit_driver(driver_retorno):\n    try:\n        driver_retorno[\"driver\"].quit()\n    except:\n        print('nao foi possível fechar o driver')\n        pass\ndef remove_user_from_robo(threads_ativos, nome_thread, retorno_login):\n    print(f\"remove_user_robo, {retorno_login}\")\n    try:\n        retorno_login[\"driver\"].headers = {}",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "remove_user_from_robo",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def remove_user_from_robo(threads_ativos, nome_thread, retorno_login):\n    print(f\"remove_user_robo, {retorno_login}\")\n    try:\n        retorno_login[\"driver\"].headers = {}\n    except:\n        pass\n    dia = str(datetime.now().day)\n    try:\n        retorno_login[\"driver\"].quit()\n    except:",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "check_higienizacoes_massa",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def check_higienizacoes_massa(threads_ativos, banco):\n    filter_1 = FieldFilter(\"status\", \"==\", \"em processamento\")\n    filter_2 = FieldFilter(\"status\", \"==\", \"aguardando na fila\")\n    filter_4 = FieldFilter(\"status\", \"==\", \"na fila\")\n    filter_3 = FieldFilter(\"status\", \"==\", \"aguardando\")\n    # filter_4 = FieldFilter(\"status\", \"==\", 'atualizando')\n    filter_5 = FieldFilter(\"status\", \"==\", \"pendente\")\n    doc_ref = (\n        db.collection(\"simulador_em_massa\")\n        .where(\"banco\", \"==\", banco)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "contabilizar_consultas_em_massa",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def contabilizar_consultas_em_massa(threads_ativos, nome_thread):\n    try:\n        if not threads_ativos.get(nome_thread,{}).get(\"id_consulta_massa\"):\n            return\n        filter_1 = FieldFilter(\"status\", \"==\", 'liberado')\n        filter_2 = FieldFilter(\"status\", \"==\", 'nao liberado')\n        if threads_ativos.get(nome_thread,{}).get(\"leads_fgts\") or threads_ativos.get(nome_thread,{}).get(\"leads_saque\"):\n            doc_ref = db.collection('higienizacao').where(filter=filter_1).where('id_consulta_massa','==',threads_ativos.get(nome_thread,{}).get(\"id_consulta_massa\"))\n        else:\n            doc_ref = db.collection('higienizacao').where(filter=Or(filters=[filter_1,filter_2])).where('id_consulta_massa','==',threads_ativos.get(nome_thread,{}).get(\"id_consulta_massa\"))",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "disparar_msg_formalizacao",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def disparar_msg_formalizacao(celular,token_connecta, cpf,mensagem):\n    try:\n        url = 'https://middle-flow.connectacx.com/webhook/mensagem?acao=formalizacao'\n        headers = {'Authorization': 'c155ed19c5649631588325542e7c8897'}\n        json = {\"numero\": celular,\n        \"token\": token_connecta,\n        \"ambiente_connecta\": \"multichat4.connectacx.com\", \n        \"mensagem\": mensagem}\n        try:\n            db.collection('base_fgts_assessorare').document(cpf).update({'msg_formalizacao_enviada':datetime.now(timezone.utc)})",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "import_base_fgts",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def import_base_fgts():\n    df = pd.read_csv('base3.csv',sep=';',dtype=str)\n    batch = db.batch()\n    for index,row in df.iterrows():\n        cpf = row['CPF']\n        if not cpf:\n            continue\n        cpf = \"\".join(re.findall(r\"\\d+\", cpf))\n        cpf = cpf.zfill(11)\n        doc = {",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "get_best_comissao",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def get_best_comissao(codigo,valor_liberado):\n    data = [\n    {\"nome\": \"FGTS - SMART TURBO\", \"codigo\": \"53279\", \"valor\": 60, \"comissao\": 82.0},\n    {\"nome\": \"FGTS - SMART TURBO\", \"codigo\": \"53279\", \"valor\": 75, \"comissao\": 67.0},\n    {\"nome\": \"FGTS - SMART TURBO\", \"codigo\": \"53279\", \"valor\": 100, \"comissao\": 52.0},\n    {\"nome\": \"FGTS - SMART VIP\", \"codigo\": \"53260\", \"valor\": 60, \"comissao\": 48.67},\n    {\"nome\": \"FGTS - SMART TURBO\", \"codigo\": \"53279\", \"valor\": 125, \"comissao\": 43.0},\n    {\"nome\": \"FGTS - SMART FLEX\", \"codigo\": \"53252\", \"valor\": 60, \"comissao\": 40.33},\n    {\"nome\": \"FGTS - SMART VIP\", \"codigo\": \"53260\", \"valor\": 75, \"comissao\": 40.33},\n    {\"nome\": \"FGTS - SMART TURBO\", \"codigo\": \"53279\", \"valor\": 150, \"comissao\": 37.0},",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "generate_brazilian_cell_number",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def generate_brazilian_cell_number():\n    # Lista de DDDs válidos no Brasil (exemplo)\n    ddds = [11, 21, 31, 41, 51, 61, 71, 81, 91]\n    # Escolhe um DDD aleatório que ainda não foi usado\n    ddd = random.choice(ddds)\n    # Gera um número de celular aleatório no formato 9XXXX-XXXX\n    number = f\"9{random.randint(8000, 9999)}{random.randint(1000, 9999)}\"\n    return ddd, number\ncodigos_bancos_dict = {\n    757: \"BANCO KEB HANA DO BRASIL S.A.\",",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "lock",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "lock = threading.Lock()\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n# cpu = 'E6oDLoUeOgCDhChnCBk1''R09mj9pdukL9yztcY9mW'\ncpu = os.environ.get(\"cpu_robo\", \"note_lucas\")\n# cpu = 'R09mj9pdukL9yztcY9mW'\n# cpu = 'cpu1'\nprint(cpu)\nnome_sistema_bancos = {\"626\": \"c6_bank\", \"623\": \"pan\"}\ndef proxies(username, password, endpoint, port, nome):\n    manifest_json = \"\"\"",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "cpu",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "cpu = os.environ.get(\"cpu_robo\", \"note_lucas\")\n# cpu = 'R09mj9pdukL9yztcY9mW'\n# cpu = 'cpu1'\nprint(cpu)\nnome_sistema_bancos = {\"626\": \"c6_bank\", \"623\": \"pan\"}\ndef proxies(username, password, endpoint, port, nome):\n    manifest_json = \"\"\"\n    {\n        \"version\": \"1.0.0\",\n        \"manifest_version\": 2,",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "nome_sistema_bancos",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "nome_sistema_bancos = {\"626\": \"c6_bank\", \"623\": \"pan\"}\ndef proxies(username, password, endpoint, port, nome):\n    manifest_json = \"\"\"\n    {\n        \"version\": \"1.0.0\",\n        \"manifest_version\": 2,\n        \"name\": \"Proxies\",\n        \"permissions\": [\n            \"proxy\",\n            \"tabs\",",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "proxy_list",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "proxy_list = [\n    # '200.234.136.191:59100',\n    # '200.234.136.79:59100',\n    '2.56.249.68:59100'\n]\ndef save_image_to_firestore(image_path, document_name):\n    # Open the image file\n    print(\"salvando imagem, \", image_path, document_name)\n    with open(image_path, \"rb\") as image_file:\n        # Read the image file",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "bancos_api_storm",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "bancos_api_storm = {\"inbursa\": 152}\ntipos_operacao_storm = {\n    \"margem livre\": 1,\n    \"refinanciamento\": 2,\n    \"cartao sem saque\": 5,\n    \"margem_livre_mais_refinanciamento\": 6,\n    \"cartao_com_saque\": 8,\n    \"refinanciamento_rec\": 10,\n    \"cartao_com_saque_complementar_avista\": 14,\n    \"emprestimo_complementar_inss\": 16,",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "tipos_operacao_storm",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "tipos_operacao_storm = {\n    \"margem livre\": 1,\n    \"refinanciamento\": 2,\n    \"cartao sem saque\": 5,\n    \"margem_livre_mais_refinanciamento\": 6,\n    \"cartao_com_saque\": 8,\n    \"refinanciamento_rec\": 10,\n    \"cartao_com_saque_complementar_avista\": 14,\n    \"emprestimo_complementar_inss\": 16,\n    \"portabilidade\": 17,",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "codigos_bancos_dict",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "codigos_bancos_dict = {\n    757: \"BANCO KEB HANA DO BRASIL S.A.\",\n    756: \"BANCO COOPERATIVO DO BRASIL S.A. – BANCOOB\",\n    755: \"Bank of America Merrill Lynch Banco Múltiplo S.A.\",\n    754: \"Banco Sistema S.A.\",\n    753: \"Novo Banco Continental S.A. – Banco Múltiplo\",\n    752: \"Banco BNP Paribas Brasil S.A.\",\n    751: \"Scotiabank Brasil S.A. Banco Múltiplo\",\n    748: \"BANCO COOPERATIVO SICREDI S.A.\",\n    747: \"Banco Rabobank International Brasil S.A.\",",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "codigo_beneficios_inss_dict",
        "kind": 5,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "codigo_beneficios_inss_dict = {\n    7: \"Aposentadoria por idade do trabalhador rural\",\n    8: \"Aposentadoria por idade do empregador rural\",\n    41: \"Aposentadoria por idade\",\n    52: \"Aposentadoria por idade (Extinto Plano Básico)\",\n    78: \"Aposentadoria por idade de ex-combatente marítimo (Lei nº 1.756/52)\",\n    81: \"Aposentadoria por idade compulsória (Ex-SASSE)\",\n    4: \"Aposentadoria por invalidez do trabalhador rural\",\n    6: \"Aposentadoria por invalidez do empregador rural\",\n    32: \"Aposentadoria por invalidez previdenciária\",",
        "detail": "models",
        "documentation": {}
    }
]